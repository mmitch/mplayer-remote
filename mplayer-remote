#!/usr/bin/perl -w
package MplayerRemote;
use strict;
use POSIX qw(mkfifo);

# see mplayer slave mode documentation at
# http://www.mplayerhq.hu/DOCS/tech/slave.txt

# check parameters
die "usage: mplayer-remote [-s] <file> [<file> [...]]\n   -s is shuffle\n" unless @ARGV;
if ($ARGV[0] eq '-s') {
    shift @ARGV;
    use List::Util 'shuffle';
    @ARGV = shuffle(@ARGV);
}

# set up working directory
my $dir = '/tmp/mplayer-remote';
(-d $dir) or mkdir $dir or die "can't mkdir `$dir': $!";

# write playlist
our $playlist = "$dir/playlist";
open PLAYLIST, '>', $playlist or die "can't open `$playlist': $!";
print PLAYLIST join "\n", @ARGV;
close PLAYLIST or die "can't close `$playlist': $!";

# create fifo
our $fifo = "$dir/fifo";
(-p $fifo) or mkfifo($fifo, 0700) or die "can't mkfifo `$fifo': $!";


# HTTP server class
{
    package MplayerRemoteWebServer;

    use HTTP::Server::Simple::CGI;
    use base qw(HTTP::Server::Simple::CGI);

    my %dispatch = (
	'start'   => \&do_start,
	'stop'    => \&do_stop,
	'next'    => \&do_next,
	'prev'    => \&do_prev,
	'pause'   => \&do_pause,
	'ff'      => \&do_ff,
	'fr'      => \&do_fr,
	'volup'   => \&do_volup,
	'voldown' => \&do_voldown,
	'volset'  => \&do_volset,
	''        => \&do_nothing,
        );

    my $JSCRIPT=<<END;
    function keypress(e)
    {
	var keynum;
        if(e.which) { keynum = e.which; }// Netscape/Firefox/Opera
	    else
	    if(window.event) { keynum = e.keyCode; } // IE
	    
	    if (keynum == 70) { window.location = '/start' }
        else
	    if (keynum == 86) { window.location = '/stop' }
        else
	    if (keynum == 68) { window.location = '/next' }
        else
	    if (keynum == 67) { window.location = '/prev' }
        else
	    if (keynum == 32) { window.location = '/pause' }
        else
	    if (keynum == 65) { window.location = '/ff' }
        else
	    if (keynum == 90) { window.location = '/fr' }
        else
	    if (keynum == 83) { window.location = '/volup' }
        else
	    if (keynum == 88) { window.location = '/voldown' }
        else
	    if (keynum == 81) { window.location = '/volset/0' }
        else
	    if (keynum == 87) { window.location = '/volset/12' }
        else
	    if (keynum == 69) { window.location = '/volset/23' }
        else
	    if (keynum == 82) { window.location = '/volset/34' }
        else
	    if (keynum == 84) { window.location = '/volset/45' }
        else
	    if (keynum == 89) { window.location = '/volset/56' }
        else
	    if (keynum == 85) { window.location = '/volset/67' }
        else
	    if (keynum == 73) { window.location = '/volset/78' }
        else
	    if (keynum == 79) { window.location = '/volset/89' }
        else
	    if (keynum == 80) { window.location = '/volset/100' }
    }
END
    ;
       

    sub get_action {
	my $cgi = shift;

	my @path = split '/', $cgi->path_info();
	return $path[1] if defined $path[1];
	return '';
    }
	
    sub get_parm {
	my $cgi     = shift;
	my $default = shift;
	$default = '' unless defined $default;

	my @path = split '/', $cgi->path_info();
	return $path[2] if defined $path[2];
	return $default;
    }

    sub handle_request {
	my $self = shift;
	my $cgi  = shift;

	my $handler = $dispatch{ get_action($cgi) };

	if (ref($handler) eq "CODE") {
	    print "HTTP/1.0 200 OK\r\n";
	    $handler->($cgi);
	    print_interface($cgi);

	} else {
	    print "HTTP/1.0 404 Not found\r\n";
	    print $cgi->header,
	    $cgi->start_html('Not found'),
	    $cgi->h1('Not found'),
	    $cgi->end_html;
	}
    }

    sub cmd {
	open  FIFO, '>', $MplayerRemote::fifo or die "can't open fifo `$MplayerRemote::fifo': $!";
	print FIFO "$_[0]\n";
	close FIFO or die "can't close fifo `$MplayerRemote::fifo': $!";
	warn "SENT: $_[0]\n";
	
    }

    sub osd {
	cmd "pausing_keep osd_show_text $_[0] 1000";
    }

    sub do_nothing {
	my $cgi = shift;

    }

    sub do_start {
	my $cgi = shift;

	do_stop($cgi);
	system("mplayer -slave -quiet -input file=$MplayerRemote::fifo -playlist $MplayerRemote::playlist -input nodefault-bindings &");
    }

    sub do_stop {
	my $cgi = shift;

	system('killall', 'mplayer');
    }
    
    sub do_next {
	my $cgi = shift;

	cmd('pt_step ' . get_parm($cgi, '+1'));
	osd('>|');
    }

    sub do_prev {
	my $cgi = shift;

	cmd('pt_step ' . get_parm($cgi, '-1'));
	osd('|<');
    }

    sub do_ff {
	my $cgi = shift;

	cmd('seek ' . get_parm($cgi, '+60') . ' 0');
	osd('>>');
    }

    sub do_fr {
	my $cgi = shift;

	cmd('seek ' . get_parm($cgi, '-60') . ' 0');
	osd('<<');
    }

    sub do_volup {
	my $cgi = shift;

	cmd('volume ' . get_parm($cgi, '+5'));
	osd('((o))');
    }

    sub do_voldown {
	my $cgi = shift;

	cmd('volume ' . get_parm($cgi, '-5'));
	osd('(o)');
    }

    sub do_volset {
	my $cgi = shift;

	my $vol = get_parm($cgi, '90');
	cmd("volume $vol 1");
	osd("(o) = $vol");
    }

    sub do_pause {
	my $cgi = shift;

	cmd('pause');
	osd('||');
    }

    sub print_interface {
	my $cgi  = shift;   # CGI.pm object
	return if !ref $cgi;

	print $cgi->header;
	print $cgi->start_html(-title => 'mplayer remote',
			       -onkeydown => 'keypress(event)',
			       -onload => 'document.getElementById("linknext").focus();',
			       -script => $JSCRIPT);

	
	print $cgi->p($cgi->a({href=>$cgi->path_info()},'again'))
	    unless $cgi->path_info() eq '/';

	print $cgi->p(
	    $cgi->a({href=>"/prev", id=>"first" },'|<'),
	    ' : ',
	    $cgi->a({href=>"/fr"      },'<<'),
	    ' : ',
	    $cgi->a({href=>"/pause"   },'||'),
	    ' : ',
	    $cgi->a({href=>"/ff"      },'>>'),
	    ' : ',
	    $cgi->a({href=>"/next"    },'>|' ),
	    $cgi->br(),
	    $cgi->a({href=>"/voldown" },'-' ),
	    ' VOL ',
	    $cgi->a({href=>"/volup"   },'+'),
	    $cgi->br(),
	    $cgi->a({href=>"/start"   },'|>'),
	    ' : ',
	    $cgi->a({href=>"/stop"    },'[]' ),
	    $cgi->br(),
	    $cgi->br(),
	    'direct commands:',
	    $cgi->br(),
	    'pause:<i>space</i>',
	    $cgi->br(),
	    'start/stop:<i>F/V</i>',
	    $cgi->br(),
	    'next/prev:<i>D/C</i>',
	    $cgi->br(),
	    'vol+/-:<i>S/X</i>',
	    $cgi->br(),
	    'seek:<i>A/Z</i>',
	    $cgi->br(),
	    'volume:<i>Q..P</i>',
	    $cgi->br(),
	    $cgi->br(),
	    $cgi->small('mplayer remote')
	    );
	print $cgi->end_html;
    }

}

# start the server
MplayerRemoteWebServer->new(1234)->run();

