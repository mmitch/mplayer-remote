#!/usr/bin/perl -w
package MplayerRemote;
use strict;
use POSIX qw(mkfifo);

# see mplayer slave mode documentation at
# http://www.mplayerhq.hu/DOCS/tech/slave.txt

# check parameters
die "usage: mplayer-remote [-s] <file> [<file> [...]]\n   -s is shuffle\n" unless @ARGV;
if ($ARGV[0] eq '-s') {
    shift @ARGV;
    use List::Util 'shuffle';
    @ARGV = shuffle(@ARGV);
}

# set up working directory
my $dir = '/tmp/mplayer-remote';
(-d $dir) or mkdir $dir or die "can't mkdir `$dir': $!";

# write playlist
our $playlist = "$dir/playlist";
open PLAYLIST, '>', $playlist or die "can't open `$playlist': $!";
print PLAYLIST join "\n", @ARGV;
close PLAYLIST or die "can't close `$playlist': $!";

# create fifo
our $fifo = "$dir/fifo";
(-p $fifo) or mkfifo($fifo, 0700) or die "can't mkfifo `$fifo': $!";


# HTTP server class
{
    package MplayerRemoteWebServer;

    use HTTP::Server::Simple::CGI;
    use base qw(HTTP::Server::Simple::CGI);

    my %dispatch = (
	'/start' => \&do_start,
	'/stop'  => \&do_stop,
	'/next'  => \&do_next,
	'/prev'  => \&do_prev,
	'/pause' => \&do_pause,
	'/ff'    => \&do_ff,
	'/fr'    => \&do_fr,
	'/'      => \&do_nothing,
        );

    sub handle_request {
	my $self = shift;
	my $cgi  = shift;

	my $path = $cgi->path_info();
	my $handler = $dispatch{$path};

	if (ref($handler) eq "CODE") {
	    print "HTTP/1.0 200 OK\r\n";
	    $handler->($cgi);
	    print_interface($cgi);

	} else {
	    print "HTTP/1.0 404 Not found\r\n";
	    print $cgi->header,
	    $cgi->start_html('Not found'),
	    $cgi->h1('Not found'),
	    $cgi->end_html;
	}
    }

    sub cmd {
	open  FIFO, '>', $MplayerRemote::fifo or die "can't open fifo `$MplayerRempte::fifo': $!";
	print FIFO "$_[0]\n";
	close FIFO or die "can't close fifo `$MplayerRempte::fifo': $!";
	warn "SENT: $_[0]\n";
	
    }

    sub osd {
	cmd "pausing_keep osd_show_text $_[0] 1000";
    }

    sub do_nothing {
	# do nothing
    }

    sub do_start {
	do_stop(@_);
	system("mplayer -slave -quiet -input file=$MplayerRemote::fifo -playlist $MplayerRemote::playlist -input nodefault-bindings -noconfig all &");
    }

    sub do_stop {
	system('killall', 'mplayer');
    }
    
    sub do_next {
	cmd('pt_step +1');
	osd('>|');
    }

    sub do_prev {
	cmd('pt_step -1');
	osd('|<');
    }

    sub do_ff {
	cmd('seek +60 0');
	osd('>>');
    }

    sub do_fr {
	cmd('seek -60 0');
	osd('<<');
    }

    sub do_pause {
	cmd('pause');
	osd('||');
    }

    sub print_interface {
	my $cgi  = shift;   # CGI.pm object
	return if !ref $cgi;

	print $cgi->header;
	print $cgi->start_html('mplayer remote');
	
	print $cgi->p($cgi->a({href=>$cgi->path_info()},'again'))
	    unless $cgi->path_info() eq '/';

	print $cgi->p(
	    $cgi->a({href=>"/prev" },'|<'),
	    ' : ',
	    $cgi->a({href=>"/fr"   },'<<'),
	    ' : ',
	    $cgi->a({href=>"/pause"},'||'),
	    ' : ',
	    $cgi->a({href=>"/ff"   },'>>'),
	    ' : ',
	    $cgi->a({href=>"/next" },'>|' ),
	    $cgi->br(),
	    $cgi->a({href=>"/start"},'|>'),
	    ' : ',
	    $cgi->a({href=>"/stop" },'[]' ),
	    $cgi->br(),
	    $cgi->br(),
	    $cgi->small('mplayer remote')
	    );
	print $cgi->end_html;
    }

}

# start the server
MplayerRemoteWebServer->new(1234)->run();

